// Code generated by protoc-gen-go. DO NOT EDIT.
// source: assignSurvey.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AssignSurveyData struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyID             string   `protobuf:"bytes,2,opt,name=surveyID,proto3" json:"surveyID,omitempty"`
	UserID               string   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	StudyID              string   `protobuf:"bytes,4,opt,name=studyID,proto3" json:"studyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignSurveyData) Reset()         { *m = AssignSurveyData{} }
func (m *AssignSurveyData) String() string { return proto.CompactTextString(m) }
func (*AssignSurveyData) ProtoMessage()    {}
func (*AssignSurveyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd570b1b4e28cbc0, []int{0}
}

func (m *AssignSurveyData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignSurveyData.Unmarshal(m, b)
}
func (m *AssignSurveyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignSurveyData.Marshal(b, m, deterministic)
}
func (m *AssignSurveyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignSurveyData.Merge(m, src)
}
func (m *AssignSurveyData) XXX_Size() int {
	return xxx_messageInfo_AssignSurveyData.Size(m)
}
func (m *AssignSurveyData) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignSurveyData.DiscardUnknown(m)
}

var xxx_messageInfo_AssignSurveyData proto.InternalMessageInfo

func (m *AssignSurveyData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AssignSurveyData) GetSurveyID() string {
	if m != nil {
		return m.SurveyID
	}
	return ""
}

func (m *AssignSurveyData) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AssignSurveyData) GetStudyID() string {
	if m != nil {
		return m.StudyID
	}
	return ""
}

func init() {
	proto.RegisterType((*AssignSurveyData)(nil), "api.AssignSurveyData")
}

func init() { proto.RegisterFile("assignSurvey.proto", fileDescriptor_dd570b1b4e28cbc0) }

var fileDescriptor_dd570b1b4e28cbc0 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2c, 0x2e, 0xce,
	0x4c, 0xcf, 0x0b, 0x2e, 0x2d, 0x2a, 0x4b, 0xad, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x4e, 0x2c, 0xc8, 0x54, 0x2a, 0xe0, 0x12, 0x70, 0x44, 0x92, 0x72, 0x49, 0x2c, 0x49, 0x14, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x11, 0x92,
	0xe2, 0xe2, 0x28, 0x06, 0xcb, 0x7a, 0xba, 0x48, 0x30, 0x81, 0x45, 0xe1, 0x7c, 0x21, 0x31, 0x2e,
	0xb6, 0xd2, 0xe2, 0xd4, 0x22, 0x4f, 0x17, 0x09, 0x66, 0xb0, 0x0c, 0x94, 0x27, 0x24, 0xc1, 0xc5,
	0x5e, 0x5c, 0x52, 0x9a, 0x02, 0xd2, 0xc2, 0x02, 0x96, 0x80, 0x71, 0x8d, 0x7c, 0xb8, 0x78, 0x90,
	0x6d, 0x14, 0xb2, 0x41, 0xe3, 0x8b, 0xea, 0x25, 0x16, 0x64, 0xea, 0xa1, 0x3b, 0x4a, 0x0a, 0xbb,
	0x70, 0x12, 0x1b, 0xd8, 0x2f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x37, 0xaf, 0x66,
	0xe1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AssignSurveyClient is the client API for AssignSurvey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssignSurveyClient interface {
	AssignSurvey(ctx context.Context, in *AssignSurveyData, opts ...grpc.CallOption) (*AssignSurveyData, error)
}

type assignSurveyClient struct {
	cc *grpc.ClientConn
}

func NewAssignSurveyClient(cc *grpc.ClientConn) AssignSurveyClient {
	return &assignSurveyClient{cc}
}

func (c *assignSurveyClient) AssignSurvey(ctx context.Context, in *AssignSurveyData, opts ...grpc.CallOption) (*AssignSurveyData, error) {
	out := new(AssignSurveyData)
	err := c.cc.Invoke(ctx, "/api.AssignSurvey/AssignSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignSurveyServer is the server API for AssignSurvey service.
type AssignSurveyServer interface {
	AssignSurvey(context.Context, *AssignSurveyData) (*AssignSurveyData, error)
}

// UnimplementedAssignSurveyServer can be embedded to have forward compatible implementations.
type UnimplementedAssignSurveyServer struct {
}

func (*UnimplementedAssignSurveyServer) AssignSurvey(ctx context.Context, req *AssignSurveyData) (*AssignSurveyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSurvey not implemented")
}

func RegisterAssignSurveyServer(s *grpc.Server, srv AssignSurveyServer) {
	s.RegisterService(&_AssignSurvey_serviceDesc, srv)
}

func _AssignSurvey_AssignSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignSurveyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignSurveyServer).AssignSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AssignSurvey/AssignSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignSurveyServer).AssignSurvey(ctx, req.(*AssignSurveyData))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignSurvey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AssignSurvey",
	HandlerType: (*AssignSurveyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignSurvey",
			Handler:    _AssignSurvey_AssignSurvey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assignSurvey.proto",
}
