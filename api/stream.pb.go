// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package helloworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type Input struct {
	Begin                int32    `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  int32    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Input) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

// The response message containing the greetings
type Output struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*Input)(nil), "helloworld.Input")
	proto.RegisterType((*Output)(nil), "helloworld.Output")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f,
	0xcf, 0x2f, 0xca, 0x49, 0x51, 0xd2, 0xe7, 0x62, 0xf5, 0xcc, 0x2b, 0x28, 0x2d, 0x11, 0x12, 0xe1,
	0x62, 0x4d, 0x4a, 0x4d, 0xcf, 0xcc, 0x93, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0x70, 0x84,
	0x04, 0xb8, 0x98, 0x53, 0xf3, 0x52, 0x24, 0x98, 0xc0, 0x62, 0x20, 0xa6, 0x92, 0x02, 0x17, 0x9b,
	0x7f, 0x69, 0x09, 0x48, 0x87, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09, 0x54, 0x0b,
	0x94, 0x67, 0x64, 0xce, 0xc5, 0x1c, 0x5c, 0x9a, 0x2b, 0x64, 0xc0, 0xc5, 0xec, 0x98, 0x92, 0x22,
	0x24, 0xa8, 0x87, 0xb0, 0x4d, 0x0f, 0x6c, 0x95, 0x94, 0x10, 0xb2, 0x10, 0xc4, 0x30, 0x25, 0x06,
	0x03, 0xc6, 0x24, 0x36, 0xb0, 0xf3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0xff, 0x50,
	0x85, 0xae, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SumClient is the client API for Sum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumClient interface {
	// Sends a greeting
	Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (Sum_AddClient, error)
}

type sumClient struct {
	cc *grpc.ClientConn
}

func NewSumClient(cc *grpc.ClientConn) SumClient {
	return &sumClient{cc}
}

func (c *sumClient) Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (Sum_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sum_serviceDesc.Streams[0], "/helloworld.Sum/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumAddClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sum_AddClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type sumAddClient struct {
	grpc.ClientStream
}

func (x *sumAddClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumServer is the server API for Sum service.
type SumServer interface {
	// Sends a greeting
	Add(*Input, Sum_AddServer) error
}

// UnimplementedSumServer can be embedded to have forward compatible implementations.
type UnimplementedSumServer struct {
}

func (*UnimplementedSumServer) Add(req *Input, srv Sum_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterSumServer(s *grpc.Server, srv SumServer) {
	s.RegisterService(&_Sum_serviceDesc, srv)
}

func _Sum_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SumServer).Add(m, &sumAddServer{stream})
}

type Sum_AddServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type sumAddServer struct {
	grpc.ServerStream
}

func (x *sumAddServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

var _Sum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Sum",
	HandlerType: (*SumServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _Sum_Add_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
