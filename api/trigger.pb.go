// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trigger.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Rule struct {
	Condition            []string `protobuf:"bytes,1,rep,name=condition,proto3" json:"condition,omitempty"`
	Action               string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c31e6d8b4368946, []int{0}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetCondition() []string {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Rule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func init() {
	proto.RegisterType((*Rule)(nil), "api.Rule")
}

func init() { proto.RegisterFile("trigger.proto", fileDescriptor_8c31e6d8b4368946) }

var fileDescriptor_8c31e6d8b4368946 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0xca, 0x4c,
	0x4f, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2,
	0x2a, 0x2d, 0x86, 0x09, 0x28, 0xd9, 0x70, 0xb1, 0x04, 0x95, 0xe6, 0xa4, 0x0a, 0xc9, 0x70, 0x71,
	0x26, 0xe7, 0xe7, 0xa5, 0x64, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06,
	0x21, 0x04, 0x84, 0xc4, 0xb8, 0xd8, 0x12, 0x93, 0xc1, 0x52, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x50, 0x9e, 0x51, 0x04, 0x17, 0xab, 0x73, 0x46, 0x6a, 0x72, 0xb6, 0x90, 0x22, 0x17, 0x7b, 0x08,
	0xc4, 0x22, 0x21, 0x4e, 0xbd, 0xc4, 0x82, 0x4c, 0x3d, 0x90, 0xa1, 0x52, 0x08, 0xa6, 0x12, 0x83,
	0x90, 0x0e, 0x17, 0x0f, 0x58, 0x2d, 0x4c, 0x1d, 0x3f, 0x58, 0xd2, 0xb1, 0xa4, 0xa4, 0x28, 0x33,
	0xa9, 0xb4, 0x24, 0xb5, 0x18, 0x45, 0x75, 0x12, 0x1b, 0xd8, 0x79, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x90, 0x7a, 0xf9, 0xc0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CheckClient is the client API for Check service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckClient interface {
	Trigger(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	CheckTrigger(ctx context.Context, in *Attributes, opts ...grpc.CallOption) (*Rule, error)
}

type checkClient struct {
	cc *grpc.ClientConn
}

func NewCheckClient(cc *grpc.ClientConn) CheckClient {
	return &checkClient{cc}
}

func (c *checkClient) Trigger(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/api.Check/Trigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) CheckTrigger(ctx context.Context, in *Attributes, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/api.Check/CheckTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServer is the server API for Check service.
type CheckServer interface {
	Trigger(context.Context, *Rule) (*Rule, error)
	CheckTrigger(context.Context, *Attributes) (*Rule, error)
}

// UnimplementedCheckServer can be embedded to have forward compatible implementations.
type UnimplementedCheckServer struct {
}

func (*UnimplementedCheckServer) Trigger(ctx context.Context, req *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (*UnimplementedCheckServer) CheckTrigger(ctx context.Context, req *Attributes) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTrigger not implemented")
}

func RegisterCheckServer(s *grpc.Server, srv CheckServer) {
	s.RegisterService(&_Check_serviceDesc, srv)
}

func _Check_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Check/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).Trigger(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_CheckTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).CheckTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Check/CheckTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).CheckTrigger(ctx, req.(*Attributes))
	}
	return interceptor(ctx, in, info, handler)
}

var _Check_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Check",
	HandlerType: (*CheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _Check_Trigger_Handler,
		},
		{
			MethodName: "CheckTrigger",
			Handler:    _Check_CheckTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger.proto",
}
